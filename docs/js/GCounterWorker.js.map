{"version":3,"sources":["webpack:///webpack/bootstrap df6e85a07f225df105d6","webpack:///./src/GCounterWorker.ts","webpack:///./src/GCounter.ts"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,uBAAe;AACf;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;;;;;;;;;ACtCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA,MAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;AC7CA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA;AACA,wBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA,4BAA2B,WAAW;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"js/GCounterWorker.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap df6e85a07f225df105d6\n **/","\"use strict\";\nexports.__esModule = true;\nvar GCounter_1 = require(\"./GCounter\");\n// create the GCounter and send creation message to main\nvar gCounter = GCounter_1.create();\npostMessage({\n    command: 'created',\n    key: gCounter.key,\n    value: GCounter_1.query(gCounter)\n});\n// every 1-5 seconds, notify main of the current value\nfunction randomInt(min, max) {\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n}\nfunction randomNotify() {\n    setTimeout(function () {\n        postMessage({\n            command: 'notify',\n            key: gCounter.key,\n            value: GCounter_1.query(gCounter)\n        });\n        randomNotify();\n    }, randomInt(1, 5) * 1000);\n}\nrandomNotify();\n// post value back\nfunction updated() {\n    postMessage({\n        command: 'updated',\n        key: gCounter.key,\n        value: GCounter_1.query(gCounter)\n    });\n}\n// respond to incoming messages\nonmessage = function (e) {\n    var message = e.data;\n    switch (message.command) {\n        case 'increment':\n            GCounter_1.increment(gCounter, gCounter.key, 1);\n            updated();\n            break;\n        case 'update':\n            GCounter_1.update(gCounter, message.key, message.value);\n            updated();\n    }\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/GCounterWorker.ts\n ** module id = 0\n ** module chunks = 0\n **/","\"use strict\";\nexports.__esModule = true;\nfunction uuid() {\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n        var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);\n        return v.toString(16);\n    });\n}\nfunction create() {\n    var key = uuid();\n    return {\n        key: key,\n        state: (_a = {}, _a[key] = 0, _a)\n    };\n    var _a;\n}\nexports.create = create;\n// Adds delta to counter, as tracked by node\nfunction increment(g, key, delta) {\n    if (delta === void 0) { delta = 1; }\n    if (delta < 0) {\n        throw new Error(\"Can't decrement a GCounter\");\n    }\n    var current = query(g);\n    g.state[key] = current + delta;\n}\nexports.increment = increment;\n// Sets value of counter, as tracked by node\nfunction update(g, key, val) {\n    g.state[key] = val;\n}\nexports.update = update;\n// Gets max\nfunction query(g) {\n    var values = [];\n    for (var key in g.state) {\n        values.push(g.state[key]);\n    }\n    return Math.max.apply(null, values);\n}\nexports.query = query;\n// Merge with another GCounter and return the merged copy.\n// It should be commutative, associative, and idempotent.\n// The merged GCounter is not, because the id is randomly generated,\n// but the state of the merged GCounter has those properties.\nfunction merge(g1, g2) {\n    var keys = {};\n    var g3 = create();\n    // get union of keys\n    for (var key in g1.state) {\n        keys[key] = true;\n    }\n    for (var key in g2.state) {\n        keys[key] = true;\n    }\n    // get max of keys\n    for (var key in keys) {\n        g3.state[key] = Math.max(g1.state[key] || 0, g2.state[key] || 0);\n    }\n    return g3;\n}\nexports.merge = merge;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/GCounter.ts\n ** module id = 1\n ** module chunks = 0\n **/"],"sourceRoot":""}